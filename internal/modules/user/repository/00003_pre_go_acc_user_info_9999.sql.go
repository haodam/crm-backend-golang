// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00003_pre_go_acc_user_info_9999.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/jackc/pgx/v5/pgconn"
)

const addUserAutoUserId = `-- name: AddUserAutoUserId :execresult



INSERT INTO ` + "`" + `pre_go_acc_user_info_9999` + "`" + ` (
    user_account, user_nickname, user_avatar, user_state, user_mobile, 
    user_gender, user_birthday, user_email, user_is_authentication
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type AddUserAutoUserIdParams struct {
	UserAccount          string         `json:"user_account"`
	UserNickname         sql.NullString `json:"user_nickname"`
	UserAvatar           sql.NullString `json:"user_avatar"`
	UserState            uint8          `json:"user_state"`
	UserMobile           sql.NullString `json:"user_mobile"`
	UserGender           sql.NullInt16  `json:"user_gender"`
	UserBirthday         sql.NullTime   `json:"user_birthday"`
	UserEmail            sql.NullString `json:"user_email"`
	UserIsAuthentication uint8          `json:"user_is_authentication"`
}

// -- name: UpdatePassword :exec
// UPDATE `pre_go_acc_user_info_9999` SET user_password = ? WHERE user_id = ?;
func (q *Queries) AddUserAutoUserId(ctx context.Context, arg AddUserAutoUserIdParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, addUserAutoUserId,
		arg.UserAccount,
		arg.UserNickname,
		arg.UserAvatar,
		arg.UserState,
		arg.UserMobile,
		arg.UserGender,
		arg.UserBirthday,
		arg.UserEmail,
		arg.UserIsAuthentication,
	)
}

const addUserHaveUserId = `-- name: AddUserHaveUserId :execresult
INSERT INTO ` + "`" + `pre_go_acc_user_info_9999` + "`" + ` (
    user_id, user_account, user_nickname, user_avatar, user_state, user_mobile, 
    user_gender, user_birthday, user_email, user_is_authentication
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type AddUserHaveUserIdParams struct {
	UserID               uint64         `json:"user_id"`
	UserAccount          string         `json:"user_account"`
	UserNickname         sql.NullString `json:"user_nickname"`
	UserAvatar           sql.NullString `json:"user_avatar"`
	UserState            uint8          `json:"user_state"`
	UserMobile           sql.NullString `json:"user_mobile"`
	UserGender           sql.NullInt16  `json:"user_gender"`
	UserBirthday         sql.NullTime   `json:"user_birthday"`
	UserEmail            sql.NullString `json:"user_email"`
	UserIsAuthentication uint8          `json:"user_is_authentication"`
}

func (q *Queries) AddUserHaveUserId(ctx context.Context, arg AddUserHaveUserIdParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, addUserHaveUserId,
		arg.UserID,
		arg.UserAccount,
		arg.UserNickname,
		arg.UserAvatar,
		arg.UserState,
		arg.UserMobile,
		arg.UserGender,
		arg.UserBirthday,
		arg.UserEmail,
		arg.UserIsAuthentication,
	)
}

const editUserByUserId = `-- name: EditUserByUserId :execresult
UPDATE ` + "`" + `pre_go_acc_user_info_9999` + "`" + `
SET user_nickname = ?, user_avatar = ?, user_mobile = ?, 
user_gender = ?, user_birthday = ?, user_email = ?, updated_at = NOW()
WHERE user_id = ? AND user_is_authentication = 1
`

type EditUserByUserIdParams struct {
	UserNickname sql.NullString `json:"user_nickname"`
	UserAvatar   sql.NullString `json:"user_avatar"`
	UserMobile   sql.NullString `json:"user_mobile"`
	UserGender   sql.NullInt16  `json:"user_gender"`
	UserBirthday sql.NullTime   `json:"user_birthday"`
	UserEmail    sql.NullString `json:"user_email"`
	UserID       uint64         `json:"user_id"`
}

func (q *Queries) EditUserByUserId(ctx context.Context, arg EditUserByUserIdParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, editUserByUserId,
		arg.UserNickname,
		arg.UserAvatar,
		arg.UserMobile,
		arg.UserGender,
		arg.UserBirthday,
		arg.UserEmail,
		arg.UserID,
	)
}

const findUsers = `-- name: FindUsers :many
SELECT user_id, user_account, user_nickname, user_avatar, user_state, user_mobile, user_gender, user_birthday, user_email, user_is_authentication, created_at, updated_at FROM pre_go_acc_user_info_9999 WHERE user_account LIKE ? OR user_nickname LIKE ?
`

type FindUsersParams struct {
	UserAccount  string         `json:"user_account"`
	UserNickname sql.NullString `json:"user_nickname"`
}

func (q *Queries) FindUsers(ctx context.Context, arg FindUsersParams) ([]PreGoAccUserInfo9999, error) {
	rows, err := q.db.Query(ctx, findUsers, arg.UserAccount, arg.UserNickname)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PreGoAccUserInfo9999{}
	for rows.Next() {
		var i PreGoAccUserInfo9999
		if err := rows.Scan(
			&i.UserID,
			&i.UserAccount,
			&i.UserNickname,
			&i.UserAvatar,
			&i.UserState,
			&i.UserMobile,
			&i.UserGender,
			&i.UserBirthday,
			&i.UserEmail,
			&i.UserIsAuthentication,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT 
    user_id,
    user_account,
    user_nickname,
    user_avatar,
    user_state,
    user_mobile,
    user_gender,
    user_birthday,
    user_email,
    user_is_authentication,
    created_at,
    updated_at
FROM ` + "`" + `pre_go_acc_user_info_9999` + "`" + `
WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID uint64) (PreGoAccUserInfo9999, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i PreGoAccUserInfo9999
	err := row.Scan(
		&i.UserID,
		&i.UserAccount,
		&i.UserNickname,
		&i.UserAvatar,
		&i.UserState,
		&i.UserMobile,
		&i.UserGender,
		&i.UserBirthday,
		&i.UserEmail,
		&i.UserIsAuthentication,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT user_id,
    user_account,
    user_nickname,
    user_avatar,
    user_state,
    user_mobile,
    user_gender,
    user_birthday,
    user_email,
    user_is_authentication,
    created_at,
    updated_at 
FROM pre_go_acc_user_info_9999 
WHERE user_id IN (?)
`

func (q *Queries) GetUsers(ctx context.Context, userID uint64) ([]PreGoAccUserInfo9999, error) {
	rows, err := q.db.Query(ctx, getUsers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PreGoAccUserInfo9999{}
	for rows.Next() {
		var i PreGoAccUserInfo9999
		if err := rows.Scan(
			&i.UserID,
			&i.UserAccount,
			&i.UserNickname,
			&i.UserAvatar,
			&i.UserState,
			&i.UserMobile,
			&i.UserGender,
			&i.UserBirthday,
			&i.UserEmail,
			&i.UserIsAuthentication,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, user_account, user_nickname, user_avatar, user_state, user_mobile, user_gender, user_birthday, user_email, user_is_authentication, created_at, updated_at FROM pre_go_acc_user_info_9999 LIMIT ? OFFSET ?
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]PreGoAccUserInfo9999, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PreGoAccUserInfo9999{}
	for rows.Next() {
		var i PreGoAccUserInfo9999
		if err := rows.Scan(
			&i.UserID,
			&i.UserAccount,
			&i.UserNickname,
			&i.UserAvatar,
			&i.UserState,
			&i.UserMobile,
			&i.UserGender,
			&i.UserBirthday,
			&i.UserEmail,
			&i.UserIsAuthentication,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUser = `-- name: RemoveUser :exec
DELETE FROM pre_go_acc_user_info_9999 WHERE user_id = ?
`

func (q *Queries) RemoveUser(ctx context.Context, userID uint64) error {
	_, err := q.db.Exec(ctx, removeUser, userID)
	return err
}
